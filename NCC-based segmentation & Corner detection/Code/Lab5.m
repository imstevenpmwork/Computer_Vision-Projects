clc; close all; clear

%% Lab5 - Main Script
% Group Participants: 
%   Filip Hesse (4889393)
%   Justin Lee (4885003)
%   Steven Palma (4882385)
%
% NOTE: All the images are created and saved in the 
% /plots folder, which is auto generated by the script. 
% The script does not show them in order to increase 
% runtime and prevent spam.

img_titles = [ "i235.png", "ur_c_s_03a_01_L_0376.png", "ur_c_s_03a_01_L_0377.png", "ur_c_s_03a_01_L_0378.png", "ur_c_s_03a_01_L_0379.png", "ur_c_s_03a_01_L_0380.png","ur_c_s_03a_01_L_0381.png"];
img_titles_cropped = crop_titles(img_titles);

%% Task 1
patches = define_patches(img_titles);
   
for i=2:length(img_titles)
% read second image to define patches
   img = imread(char(img_titles(i)));
   img = rgb2gray(img); 

   for j=1:length(patches)
       %% Normalized 2-D cross-correlation, record time
       tic
       C = normxcorr2(patches(j).patch, img);
       patches(j).corr_time = [patches(j).corr_time toc];
       
       % Do following steps only for some patches, we don't need too many exported images
       if (i ~=7 && j < 5) || (i ==7) 
           %% Find indices of maximum, plot a marker
           [y_max,x_max]=find(C==max(C(:)));
           figure('visible','off'),imagesc(C),colormap gray, hold on
           plot(x_max, y_max, 'rx', 'LineWidth',2)
           saveas(gcf,strcat('plots/',img_titles_cropped(i),'_scoremap_', patches(j).title, '.jpg'));

           %% normxcorr2 adds padding, so filtered image is bigger by filtersize
           %in each dimension. To get the corner point, subtract twice half of the
           %filtersize
           corner1_offset = [x_max, y_max]-patches(j).psize;
           center_offset = [x_max, y_max]-patches(j).psize/2;

           %% Plot original image with rectangle of patch
           figure('visible','off'), imagesc(img); colormap gray, hold on;
           rectangle('Position',[corner1_offset, patches(j).psize],'EdgeColor',[1,0,0], 'LineWidth',2);
           plot(center_offset(1), center_offset(2), 'rx','LineWidth',2);
           saveas(gcf,strcat('plots/',img_titles_cropped(i),'_segment_', patches(j).title, '.jpg'));
       end
   end
end

%% Plot elapsed time over Filtersize
[npixels, duration]= plot_time_over_filtersize(patches);

%% Task 2
tmp=imread(img_titles(1),'png');
img=double(tmp);

%% calculate partial derivatives
dx=[1 0 -1; 2 0 -2; 1 0 -1];
dy=[1 2 1; 0  0  0; -1 -2 -1];
x=conv2(img,dx,'same');
y=conv2(img,dy,'same');
figure,imagesc(x),colormap gray,title('Partial derivative of x')
saveas(gcf,strcat('plots/',img_titles_cropped(1),'_partial_dx','.jpg'));
figure,imagesc(y),colormap gray,title('Partial derivative of y')
saveas(gcf,strcat('plots/',img_titles_cropped(1),'_partial_dy','.jpg'));

%% compute products of derivatives at every pixel
Ix2=x.*x; Iy2=y.*y; Ixy=x.*y;

%% compute the sum of products of  derivatives at each pixel
g = fspecial('gaussian', 9, 1.2);
figure,imagesc(g),colormap gray,title('Gaussian Filter')
saveas(gcf,strcat('plots/',img_titles_cropped(1),'_gaussian','.jpg'));
Sx2=conv2(Ix2,g,'same'); Sy2=conv2(Iy2,g,'same'); Sxy=conv2(Ixy,g,'same');

%% features detection
[rr,cc]=size(Sx2);
edge_reg=zeros(rr,cc); corner_reg=zeros(rr,cc); flat_reg=zeros(rr,cc);
R_map=zeros(rr,cc);
k=0.05;

for ii=1:rr
    for jj=1:cc
        %define at each pixel x,y the matrix
        M=[Sx2(ii,jj),Sxy(ii,jj);Sxy(ii,jj),Sy2(ii,jj)];
        %compute the response of the detector at each pixel
        R=det(M) - k*(trace(M).^2);
        R_map(ii,jj)=R;
    end
end

%% find max value of R
max_R = max(R_map,[],'all');

for ii=1:rr
    for jj=1:cc
        %threshod on value of R
        if R_map(ii,jj)>0.3*max_R
            corner_reg(ii,jj)=1;
        end
    end
end

%% find centroid of corner regions
corner_reg=logical(corner_reg);
prop = regionprops(corner_reg,'Area','Centroid');
areas=[prop.Area];

[~,ib]=sort(areas,'descend');
[~,length]=size(ib);
centroid = zeros(2,length);
for n = 1:length
    centroid(1,n) = floor(prop(ib(n)).Centroid(1));
    centroid(2,n) = floor(prop(ib(n)).Centroid(2));
end

%% plot and save corner regions and R map
figure,imagesc(corner_reg.*img),colormap gray,title('corner regions')
saveas(gcf,strcat('plots/',img_titles_cropped(1),'_corner_regions','.jpg'));
figure,imagesc(R_map),colormap jet,title('R map')
saveas(gcf,strcat('plots/',img_titles_cropped(1),'_R_map','.jpg'));

figure,imagesc(img),colormap gray;
hold on;
plot(centroid(1,:),centroid(2,:),'*r');
title('Detected corners');
saveas(gcf,strcat('plots/',img_titles_cropped(1),'_detected_corners','.jpg'));